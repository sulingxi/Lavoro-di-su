import java.util.ArrayList;
import java.util.concurrent.Semaphore;

public class Main {
    static Semaphore s1=new Semaphore(1);
    static Semaphore s2=new Semaphore(0);
    static Semaphore posti=new Semaphore(9);
    static boolean continua=true;
    public static synchronized void stampa(){
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if(Scacchiera.scacchiera[i][j]!=null){
                    System.out.print(Scacchiera.scacchiera[i][j]+" ");
                }else {
                    System.out.print("  ");
                }

            }
            System.out.println();

        }
        System.out.println("--------------------------------------------");
    }
    public static void main(String[] args) {

        Player p1=new Player(s1,"player1","0",s2);
        Player p2=new Player(s2,"player2","x",s1);
        p1.start();
        p2.start();
    }
}

class Scacchiera{
    public static boolean win(String simbolo){
        int r=0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if(scacchiera[i][j]!=null){
                    if(scacchiera[i][j].equals(simbolo)){
                        r++;
                    }
                }

            }
         if(r>=3){
             Main.continua=false;
             return true;

         }
         r=0;

        }
        int c=0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if(scacchiera[j][i]!=null){
                    if(scacchiera[j][i].equals(simbolo)){
                        c++;
                    }
                }

            }
            if(c>=3){
                Main.continua=false;
                return true;
            }
            c=0;

        }


        int d1=0;
        int d2=0;
        for (int i = 0; i <3 ; i++) {
            for (int j = 0; j < 3; j++) {
                if(i==j){
                    if(scacchiera[i][j]!=null){
                        if(scacchiera[i][j].equals(simbolo)){
                            d1++;
                        }
                    }

                }
                if(i+j==2){
                    if(scacchiera[i][j]!=null){
                        if(scacchiera[i][j].equals(simbolo)){
                            d2++;
                        }
                    }

                }
            }
        }

        if(d1>=3){
            Main.continua=false;
            return true;
        }
        if(d2>=3){
            Main.continua=false;
            return true;
        }
        return false;

    }

    static String scacchiera[][]=new String[3][3];


}
class Player extends Thread{
    public Semaphore s;
    public String nome;
    public String simbolo;
    public Semaphore s2;

    public Player(Semaphore s, String nome,String simbolo,Semaphore s2) {
        this.s = s;
        this.nome = nome;
        this.simbolo=simbolo;
        this.s2=s2;

    }

    @Override
    public void run() {

        while(true){
            if(!Main.continua){
                break;
            }

           if(s.tryAcquire()){
                try{
                    Main.posti.acquire();
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }
               boolean m=true;
                int r=0;
                int c=0;
                while(m){
                    m=false;
                    r=(int)Math.floor(Math.random()*3);
                    c=(int)Math.floor(Math.random()*3);
                    if(Scacchiera.scacchiera[r][c]!=null){
                        m=true;
                    }
                }
                Scacchiera.scacchiera[r][c]=simbolo;
                Main.stampa();


               if(Scacchiera.win(simbolo)){
                   System.out.println(nome+" "+"win ");
                   break;
               }
               try {
                   Thread.sleep(700);
               } catch (InterruptedException e) {
                   throw new RuntimeException(e);
               }

               s2.release();
            }else {
                try{
                    Thread.sleep(2000);
                }catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }

            }
           if(Main.posti.availablePermits()<=0){
               break;
           }
        }

    }
}